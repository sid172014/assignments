/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const todos = require('./todos.json');
const fs = require('fs');
const port = 3000;

const app = express();

app.use(bodyParser.json());

// Retrieve all the tasks which are present inside the 'todos.json' file
app.get('/', (req, res) => {
  res.send(todos);
});

// Retrieve a task with the help of the id which will be there for each of the task which is present inside the 'todos.json' file
app.get('/todos/:id', (req, res) => {
  const user = todos.find((item) => {
    return item.id == req.params.id;
  });
  if (!user) {
    res.status(404).send();
  }
  res.send(user);
});

// Retrieve all the objects that are present inside the todo list item array
app.post('/todos', (req, res) => {
  let newId = todos[todos.length - 1].id + 1;
  const userObject = {
    id: newId,
    title: req.body.title,
    description: req.body.description,
    completed: req.body.completed
  };

  const todolist = JSON.parse(fs.readFileSync('./todos.json', "utf-8"));
  todolist.push(userObject);
  fs.writeFileSync('./todos.json', JSON.stringify(todolist), 'utf-8');
  res.status(201).send(userObject);
});

// Updates any JSON object that is already present inside the 'todos.json' file
app.put('/todos/:id', (req, res) => {
  const user = todos.find((item) => {
    return item.id == req.params.id;
  });
  if (!user) {
    res.status(404).send();
  } else {
    const userObject = {
      id: user.id,
      title: req.body.title || user.title,
      description: req.body.description || user.description,
      completed: req.body.completed || user.completed
    };

    todos[req.params.id - 1] = userObject;
    fs.writeFileSync('./todos.json', JSON.stringify(todos), 'utf-8');
    res.status(200).send();
  }
});

app.delete('/todos/:id', (req, res) => {
  if (todos[todos.length - 1].id < req.params.id) {
    res.status(404).send();
  } else {
    const temp = todos.filter((item) => {
      return item.id != req.params.id;
    });

    fs.writeFileSync('./todos.json', JSON.stringify(temp), 'utf-8');
    res.status(200).send();
  }
});

app.get('*' , (req,res) => {
  res.status(404).send();
})

app.listen(port, () => {
  console.log("Server is listening on port " + port);
});

module.exports = app;